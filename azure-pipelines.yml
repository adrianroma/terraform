
parameters:
        - name: environmentName
          type: string
          default: 'Development' 
          values:
                  - Development
                  - Test
                  - Production
        - name: appName
          type: string
          default: 'Terraform'
          values:
                  - Terraform
                  - PowerShell

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '0d817d48-1881-4e2e-9075-25b55ad2b59e'

  webAppName: 'Terraform Auto'

  environmentName: 'Development' # Sample Name

  # Function app name
  functionAppName: ''

  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)'



stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - powershell: |
        if (Test-Path "extensions.csproj") {
            dotnet build extensions.csproj --output ./$(workingDirectory)/bin
        }
      displayName: 'Build extensions'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: $(workingDirectory)
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - task: AzureFunctionApp@2
            displayName: 'Azure functions app deploy'
            inputs:
              appName: 'Terraform'
              connectedServiceNameARM: '$(azureSubscription)'
              appType: functionApp
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
